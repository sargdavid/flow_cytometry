---
title: "Untitled"
format: html
editor: visual
---?rmu
---

HEU is exposed UE unexposed controls vs LPS

```{r}
##
cnormalize <- function (x,y,method= c("quantile","FY","zscores")[1],spancons=0.001) {
# x is an array of numbers.
# quantile = does quantile normalization of the arrays
# FY = does Fisher-Yates normalization
# zscores= does zscores
  if(missing(y)| is.null(y)) {usey=F} else {
    if(!is.matrix(y))y= as.matrix(y)
    if(!is.matrix(x))x= as.matrix(x) 
    usey=T }
  if(method=="zscores") {
    xx=t((t(x) -(cm<-cmean(x))))/(cs<-csd(x))
    if(usey) yy=t(t(y) -cm)/cs  }
    else{
xm <- apply(x, 2, sort)
xxm <- if(method=="quantile") rmedian.na(xm) else qnorm((1:nrow(x))/(nrow(x)+1))         
xr <- c(apply(x, 2,rank))
xx=array(fsm(xxm,xr,spancons = 0.1),dim(x),dimnames(x))
#xx=array(approx(1:nrow(x), xxm, xr)$y, dim(x), dimnames(x))
}
cat(1,"\n")
if(usey) {
yy=y
for(i in 1:ncol(x)){
  uu<-loess(xx[,i]~x[,i],span=spancons,control=loess.control(surface =  "direct"))
  yy[,i]=predict(uu,newdata=y[,i])
}
list(x=xx,y=yy) }
else xx
}

fsm = function(xxm,xr,spancons=0.01) {
  n=nrow(xr)
  ii= c(seq(1,n,by=10),n)
uu<-loess(xxm[ii]~ii,span=spancons,control=loess.control(surface =  "direct"))
array(predict(uu,newdata=c(xr)),dim(xr),dimnames(x))
}
fsm = function(x,y,z) {
uu<-smooth.spline(x,y)
if(is.matrix(z)) for(i in 1:ncol(z))
zz[,i]=predict(uu,newdata=z[,i,drop=F])$y
zz
}
```

apply to the new data

```{r}
# EC = HEU_Control_lymph
#rm(HEU_Control_lymph)
#ELPS= HEU_LPS_lymph
#rm(HEU_LPS_lymph)

 gap = function(x) 
   if (any(x == 0))  if (all(x >= 0) | all(x <= 0)) 
      min(abs(x)[x != 0])/sd(x[x != 0]) else 0 else 0
 
 skew = function(x) 
   if (min(x) >= 0) skewness(x[x > 0]) else if (max(x) <= 0) 
    skewness(x[x < 0])  else skewness(x)

```

```{r}
library(DNAMR)
load("~/Documents/Lead Genertion/Flow Cytometry_Lymphocytes/dt_dn_09112024_1400.RData")
dt_dn=readRDS("dt_dn.RDS")
z = dt_dn[,-(1:3)]
par(mfrow=c(3,3), mar=c(4,4,1,1))
for(i in 1:8) hist(z[,i],320,col=7)
x= z[[1]][z[[1]]>=0]

## Try trans2t because there are negative values
ztrans1 = sapply(z,function(x)trans2t(x)$x)
ztrans0 = sapply(z,function(x)transgap(x)$x)
par(mfrow=c(4,6), mar=c(4,4,1,1))
for(i in 1:8) { 
  hist(z[[i]],30,col=7,main=names(z)[i],xlab=names(z)[i])
  hist(ztrans1[,i],30,col=7,main=paste("Trans2t",names(z)[i]),xlab=names(z)[i])
  hist(ztrans0[,i],30,col=7,main=paste("TransGap",names(z)[i]),xlab=names(z)[i])
  }


# Define the transatan transformation which includes positive and
# negative values. 
#transatan = function(x,a=1) atan(a*x/median(x[x>0]))
transatan = function(x,a=1,m=median(x),s=sd(x)) atan(a*(x-m)/s)

ff = function(th,x=z[[1]],m=median(x),s=sd(x)) abs(kurtosis(ttt<-transatan(x,th,m,s))-3) + abs(skewness(ttt))^(4/3)

#res00 = res0

res0=NULL; 
for(i in 1:8) res0[i]=optimize(ff, c( 0.01,100),z[[i]])$minimum

ztrans2 = z
for(i in 1:8) ztrans2[[i]]<-transatan(z[[i]],res0[i])

par(mfrow=c(4,4), mar=c(4,4,1,1))
for(i in 1:8) { hist(z[[i]],30,col=7,main=names(z)[i],xlab=names(z)[i]);
  hist(ztrans2[[i]],30,col=7,main=paste("Transfromed",names(z)[i]),xlab=names(z)[i])}

# Change all the negative values to zero
x =z[[2]]
x[x<0]=0
hist(transgap(x)[[1]],col=7,xlab="PD1",main="Transformed PD1")
ztrans2[[2]] = transgap(x)[[1]]

## Plot the final results
par(mfrow=c(4,4), mar=c(4,4,1,1))
for(i in 1:8) { 
  hist(z[[i]],30,col=7,main=names(z)[i],xlab=names(z)[i])
  hist(ztrans2[[i]],30,col=7,main=paste("Transfromed",names(z)[i]),xlab=names(z)[i])}



```
